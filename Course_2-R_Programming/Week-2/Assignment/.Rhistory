`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- (0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char = c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Jack")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
is.na(my_data)
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(a)]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[3:2:7] = c()
x[3:7] = c()
x[3] <- 0
x[3, 5, 7] <- 0
x(3, 5, 7) <- 0
x[3] <- 0; x[5] <- 0; x[7] <- 9
x[3] <- 0; x[5] <- 0; x[7] <- 0
temp <- c(3, 5, 7)
temp <- c(3, 5, 7); temp <- []
temp <- c(3, 5, 7); temp <- [[]
temp <- c(3, 5, 7); temp <- [[
temp <- c(3, 5, 7); temp <- [
temp <- c(3, 5, 7); temp <- temp[]
temp <- c(3, 5, 7); temp[] <- 0
temp <- c(3, 5, 7); temp[] <- 0
temp <- [c(3, 5, 7)]
temp <- [c(3, 5, 7)
temp[] <- c(3, 5, 7)
temp[] <- c(3, 5, 7)
temp[c(3, 5, 7)]
temp <- c(3, 5, 7); temp <- [temp]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", 'bar', 'norf')
identical(vect, vect2)
vect["bar"]
vect[c('foo', 'bar')]
my_vector = 1:20
my_vector = c(1:20)
my_vector = c(1:3)
my_vector <- c(1:20)
x[1:20]
my_vect <- x[1:20]
my_vectpr <- x[1:20]
my_vector <- x[1:20]
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5, byrow = FALSW)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5, byrow = FALSE)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5, byrow = FALSE, dimnames = FALSE)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
my_matrix2 <-matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE,dimnames = NULL)
my_matrix2 <-matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE,dimnames = NULL)
exit
library("swirl")
swirl()
my_matrix2 = matrix(1:20, 5, 4)
my_matrix2 = matrix(1:20, nrow = 4, ncol = 5)
identical()
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
dim(cnames)
colnames(my_data) <- cnames
my_data
exit
for(i in 1:10){}
for(i in 1:10){}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(3 + i)
}
x <- c('a', 'b', 'c', 'd')
for(letter in x){
print(letter)
}
add2 <- function(a, b){
a + b
}
add2(3, 6)
add2 <- function(a, b){
return a + b
}
add2 <- function(a, b){
c <- a + b
}
add2 <- function(a, b){
c <- a + b
return c
}
add2 <- function(a, b){
c <- a + b
c
}
add2(1, 4)
na.rm = FALSE
agrs(ls)
agrs(lm)
args(lm)
?args
f <- function(a, b){
a^b
}
f(2, 3)
f(2, 4)
f(2, 5)
f(2, 50000000000)
f(2, 5000000000)
f(2, 500000000)
f(2, 50000000)
f(2, 5000000)
f(2, 500000)
f(2, 50000)
f(2, 5000)
f(2, 500)
f <- funciton(a, b){
print(a)
}
f <- funciton(a, b){
print(a)
}
f <- funciton(a, b){
print(a)
print(b)
}
f <- funciton(a, b){
print(a)
print(b)
}
g <- funcion(a, b){}
g <- funcion(a, b){
print(a)
print(b)
}
g <- funcion(aa, bb){
print(aa)
print(bb)
}
g <- function(aa, bb){
print(aa)
print(bb)
}
g(34, 22)
g(342)
mean
args(paste)
args(cat)
?cat
iter <- stats::rpois(1, lambda = 10)
iter
cat("iteration = ", iter <- iter + 1, "\n")
lm <- function(x){ x * x }
lm
lm(3)
search()
search("graph")
search("ggplot")
search("ggplot2")
search("package:ggplot2")
library("swirl")
library("swirl")
swirl()
a <- 10
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
make.power <- function(n){
pow <- funcition(x){
x^n
}
pow
}
make.power <- function(n){
pow <- function(x){
x^n
}
pow
}
cube <- make.power(3)
cube
cube(2)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
7 %% 4
submit()
submit()
submit()
remainder <- function(num, divisor) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
remainder(7, 3)
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(dev, c(1.4, 3.6, 7.9, 8.8))
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){return x[1]}, c(8, 4, 0))
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){x[0]}, c(8, 4, 0))
info(vector)
info()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[len(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Jack")
submit()
mad_libs("daidja")
submit()
submit()
paste('I', 'love', 'R!')
paste('I', %p%, 'love', %p%, 'R!')
'I', %p%, 'love', %p%, 'R!'
'I' %p% 'love' %p% 'R!'
date()
?date
Sys.time()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date('1969-01-01')
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays*
dk
weekdays()
weekdays("d1")
weekdays(d1)
month(t1)
months(t1)
quarters((t2))
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n){x^3}
cube(3)
x <- 1:10
if(x > 5){x <- 0}
if(x > 5){
x <- 0
}
f <- function(x){
g <- function(y){
y + z
}
}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
?read.csv
source("pollutantmean.R")
?dir.exists
?changedFiles
file.path()
getwd()
setwd("E:\Coursera-DataScience\Course_2-R_Programming\Week-2\Assignment")
setwd("E:/Coursera-DataScience/Course_2-R_Programming/Week-2/Assignment")
getwd()
source("pollutantmean.R")
pollutantmean("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", 1)
pollutantmean("specdata", "test", 1)
pollutantmean("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", "test", 1)
source("pollutantmean.R")
pollutantmean("specdata", "test", 1)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
getwd()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", 3)
source("complete.R")
complete("specdata", 3)
source("complete.R")
complete("specdata", 3)
complete("specdata", 1)
?complete.cases
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
hear(cr)
head(cr)
summary(cr)
length(cr)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
source('complete.R')
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
source("corr.R")
source("complete.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
