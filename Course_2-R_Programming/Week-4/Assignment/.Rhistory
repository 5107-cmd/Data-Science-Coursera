my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
dim(cnames)
colnames(my_data) <- cnames
my_data
exit
for(i in 1:10){}
for(i in 1:10){}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(3 + i)
}
x <- c('a', 'b', 'c', 'd')
for(letter in x){
print(letter)
}
add2 <- function(a, b){
a + b
}
add2(3, 6)
add2 <- function(a, b){
return a + b
}
add2 <- function(a, b){
c <- a + b
}
add2 <- function(a, b){
c <- a + b
return c
}
add2 <- function(a, b){
c <- a + b
c
}
add2(1, 4)
na.rm = FALSE
agrs(ls)
agrs(lm)
args(lm)
?args
f <- function(a, b){
a^b
}
f(2, 3)
f(2, 4)
f(2, 5)
f(2, 50000000000)
f(2, 5000000000)
f(2, 500000000)
f(2, 50000000)
f(2, 5000000)
f(2, 500000)
f(2, 50000)
f(2, 5000)
f(2, 500)
f <- funciton(a, b){
print(a)
}
f <- funciton(a, b){
print(a)
}
f <- funciton(a, b){
print(a)
print(b)
}
f <- funciton(a, b){
print(a)
print(b)
}
g <- funcion(a, b){}
g <- funcion(a, b){
print(a)
print(b)
}
g <- funcion(aa, bb){
print(aa)
print(bb)
}
g <- function(aa, bb){
print(aa)
print(bb)
}
g(34, 22)
g(342)
mean
args(paste)
args(cat)
?cat
iter <- stats::rpois(1, lambda = 10)
iter
cat("iteration = ", iter <- iter + 1, "\n")
lm <- function(x){ x * x }
lm
lm(3)
search()
search("graph")
search("ggplot")
search("ggplot2")
search("package:ggplot2")
library("swirl")
library("swirl")
swirl()
a <- 10
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
make.power <- function(n){
pow <- funcition(x){
x^n
}
pow
}
make.power <- function(n){
pow <- function(x){
x^n
}
pow
}
cube <- make.power(3)
cube
cube(2)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
7 %% 4
submit()
submit()
submit()
remainder <- function(num, divisor) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
remainder(7, 3)
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(dev, c(1.4, 3.6, 7.9, 8.8))
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){return x[1]}, c(8, 4, 0))
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){x[0]}, c(8, 4, 0))
info(vector)
info()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[len(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Jack")
submit()
mad_libs("daidja")
submit()
submit()
paste('I', 'love', 'R!')
paste('I', %p%, 'love', %p%, 'R!')
'I', %p%, 'love', %p%, 'R!'
'I' %p% 'love' %p% 'R!'
date()
?date
Sys.time()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date('1969-01-01')
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays*
dk
weekdays()
weekdays("d1")
weekdays(d1)
month(t1)
months(t1)
quarters((t2))
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n){x^3}
cube(3)
x <- 1:10
if(x > 5){x <- 0}
if(x > 5){
x <- 0
}
f <- function(x){
g <- function(y){
y + z
}
}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
getwd()
?setwd
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, mean)
x <- apply(x, 1, sum)
x
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = 0.25)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 10), c(2, 2, 10))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
ls
ls
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
dim(cls_list)
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19,23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flag, unique)
sapply(flaga, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data(iris)
iris
apply(iris$Sepal.Length, 2, mean)
apply(iris[, 1], 2, mean)
apply(iris[, 1:4], 2, mean)
round(5.843333)
apply(iris$Sepal.Length[iris$Species=="virginica"], 2, mean)
sl<-data.frame(iris$Sepal.Length[iris$Species=="virginica"])
summary(s1)
summary(sl)
abs(mean(mtcars$hp[mtcars$cyl == 4]) - mean(mtcars$hp[mtcars$cyl == 8]))
str(sum)
x <- 1:4
x
summary(x)
str(x)
set.seed(20)
x <- rnorm(100, 0, 1)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
x <- rnorm(100, 0, 0.5)
y <- 0.5 + 2 * x + e
plot(x, y)
set.seed(10)
x <- rnorm(100, 0, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y)
summary(y)
set.seed(10)
x <- rbinom(100, 0, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
sample(1:5, 7)
sample(1:5, 4)
sample(1:5, 0)
System.time()
system.time()
system.time(readLines('https://www.austlittlestep.com'))
system.time(readLines('https://www.aust.edu'))
system.time(readLines('http://www.aust.edu'))
system.time({
x <- 0
for(i in 1:10){
x <- x + i
}
print(x)
})
Rprof({
x <- 0
for(i in 1:10){
x <- x + i
}
print(x)
})
sample.interval=10000
sample.interval
by.total
$by.total
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
variable
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
rnorm(10)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, title("My Plot"))
plot(cars$speed, cars$dist, title("My Plot")
dd
plot(cars$speed, cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?bxplot
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x, y)
getwd()
setwd("E:/Coursera-DataScience/Course_2-R_Programming/Week-4/Assignment")
source(rankall.R)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("pneumonia", "worst")
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
source("rankall.R")
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
source("best.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source('rankall.R')
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
source('rankhospital.R')
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
